"""
Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range:
 [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer
  overflows."""


class Solution(object):
    def reverse(self, x):
        """
        :type x: int
        :rtype: int
        """
        # Negative boolean so slicing method does not error with negative values
        negative = False
        # Handles overflow
        if (x > 2**31) or (x < -2**31):
            return 0
        elif x < 0:
            # Marks as being negative, makes positive for slicing
            negative = True
            x = x*-1
        # Uses slicing as opposed to a for loop
        returnVal = int(str(x)[::-1])
        if negative:
            # Checks if was intially negative
            returnVal = returnVal * -1
        return returnVal


test = Solution()
print(test.reverse(-1234))
